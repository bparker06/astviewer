#!/opt/local/bin/python
""" 
   Program that shows the program on the right and its abstract syntax tree (ast) on the left.
"""
from __future__ import print_function

import sys, argparse, logging
import astviewer
from PySide import QtGui


logger = logging.getLogger(__name__)

        
def main():
    """ Main program to test stand alone 
    """
    app = QtGui.QApplication(sys.argv) # to allow for Qt command line arguments
    
    parser = argparse.ArgumentParser(description='Python abstract syntax tree viewer')
    parser.add_argument(dest='file_name', help='Python input file', nargs='?')
    parser.add_argument('-l', '--log-level', dest='log_level', default = 'warn', 
        help = "Log level. Only log messages with a level higher or equal than this "
            "will be printed. Default: 'warn'",
        choices = ('debug', 'info', 'warn', 'error', 'critical'))
    
    args = parser.parse_args(args = app.arguments())

    logging.basicConfig(level = args.log_level.upper(), 
        format='%(filename)20s:%(lineno)-4d : %(levelname)-7s: %(message)s')

    logger.info('Started {}'.format(astviewer.PROGRAM_NAME))
    exit_code = astviewer.view(width=1100, height=800, file_name = args.file_name)
    logging.info('Done {}'.format(astviewer.PROGRAM_NAME))
    sys.exit(exit_code)


if __name__ == '__main__':
    main()
